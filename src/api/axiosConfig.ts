// src/api/axiosConfig.ts
import axios, { AxiosResponse, AxiosError } from "axios";
import AsyncStorage from '@react-native-async-storage/async-storage';
import { API_BASE_URL } from "@env";

// Global reference to signOut function for token expiration handling
let globalSignOut: (() => void) | null = null;

// Function to set the global signOut reference
export const setGlobalSignOut = (signOutFunction: () => void) => {
  globalSignOut = signOutFunction;
};

const api = axios.create({
  baseURL: API_BASE_URL,
});

// --- INTERCEPTOR DE REQUISI√á√ÉO ---
// Este c√≥digo √© executado ANTES de cada requisi√ß√£o ser enviada
api.interceptors.request.use(
  async (config) => {
    // Adiciona o token de autentica√ß√£o se dispon√≠vel
    try {
      const token = await AsyncStorage.getItem('@FinancasApp:token');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    } catch (error) {
      console.error('Erro ao buscar token:', error);
    }

    // S√≥ logamos em ambiente de desenvolvimento para n√£o poluir o console de produ√ß√£o
    if (__DEV__) {
      const url = config.url;
      const method = config.method?.toUpperCase();

      console.log(`[API Request] üöÄ: ${method} ${url}`);

      // Loga o corpo da requisi√ß√£o (payload), se houver um
      if (config.data) {
        console.log("[Payload] üì¶:", JSON.stringify(config.data, null, 2));
      }
    }
    // √â obrigat√≥rio retornar a config para que a requisi√ß√£o continue
    return config;
  },
  (error) => {
    // Trata erros que acontecem ANTES da requisi√ß√£o ser enviada
    if (__DEV__) {
      console.error("[API Request Error] üî•:", error);
    }
    return Promise.reject(error);
  }
);

// --- INTERCEPTOR DE RESPOSTA ---
// Este c√≥digo √© executado DEPOIS que uma resposta √© recebida
api.interceptors.response.use(
  (response: AxiosResponse) => {
    // Se a resposta for bem-sucedida (status 2xx), apenas a retornamos
    if (__DEV__) {
      console.log(
        `[API Response] ‚úÖ: ${response.config.method?.toUpperCase()} ${
          response.config.url
        }`,
        response.data
      );
    }
    return response;
  },
  async (error: AxiosError) => {
    // Trata todos os erros de resposta (status 4xx, 5xx)
    if (__DEV__) {
      const url = error.config?.url;
      const method = error.config?.method?.toUpperCase();
      const status = error.response?.status;
      const errorData = error.response?.data;

      console.error(`[API Response Error] ‚ùå: ${method} ${url}`);
      console.error(`[Error Status] üìâ: ${status}`);
      if (errorData) {
        console.error("[Error Data] üìÑ:", JSON.stringify(errorData, null, 2));
      }
    }

    // Trata token expirado (401 Unauthorized)
    if (error.response?.status === 401) {
      if (__DEV__) {
        console.warn('[Token Expiration] üîí: Token expirado, fazendo logout autom√°tico...');
      }
      
      try {
        // Remove token do AsyncStorage
        await AsyncStorage.removeItem('@FinancasApp:token');
        await AsyncStorage.removeItem('@FinancasApp:user');
        
        // Chama a fun√ß√£o de signOut global se dispon√≠vel
        if (globalSignOut) {
          globalSignOut();
          if (__DEV__) {
            console.info('[Token Expiration] ‚úÖ: Usu√°rio deslogado automaticamente');
          }
        } else {
          console.warn('[Token Expiration] ‚ö†Ô∏è: globalSignOut n√£o est√° dispon√≠vel');
        }
      } catch (storageError) {
        console.error('Erro ao processar logout autom√°tico:', storageError);
      }
    }

    // √â obrigat√≥rio rejeitar a promise para que o bloco .catch() do nosso app possa tratar o erro
    return Promise.reject(error);
  }
);

export default api;
